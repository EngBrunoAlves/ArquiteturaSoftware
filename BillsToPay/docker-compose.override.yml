version: '3.4'
# Agora para funcionar tem que antes criar a network "proxy" com o seguinte comando: "docker network create --driver overlay --attachable proxy" 
services:
  arquitetura_billstopay:
    image: ${DOCKER_REGISTRY_PREFIX}arquitetura_billstopay:${TAG_VERSION:-latest}
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings:BillsToPayConnection=server=${MYSQL_DB_HOST};user id=${MYSQL_DB_USER};password=${MYSQL_DB_PASSWORD};persistsecurityinfo=True;database=billstopay;allowuservariables=True;SslMode=none;TreatTinyAsBoolean=false;
      - BillsToPayMongoDbConfig:ConnectionString=mongodb://root:root@mongo
      - BillsToPayMongoDbConfig:DatabaseName=BillsToPayDb
      - BillsToPayConfig:Database=MySql
      - ElasticConfiguration:Uri=http://es01:9200/
      - ElasticConfiguration:Username=elastic
      - ElasticConfiguration:Password=SMTbsaC0eXhbiNpy8H2g
    ports:
      - "8080:80"
    networks:
      - arq_be
      - mongo
      - mysql
      - elk
      - proxy
    deploy:
      labels:
        - com.df.notify=true
        - com.df.servicePath=/billstopay
        - com.df.port=80
    depends_on:
      - mysql
      - mongo
      - es01
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "10"
  
  mysql:
    image: mysql:5.7
    restart: "no"
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3306:3306
    networks:
      - mysql
      - proxy
    volumes:
      - type: bind
        source: "/C/projetos/Databases/DataFiles"
        target: "/var/lib/mysql"
      - type: bind
        source: "/C/projetos/Databases/conf.d"
        target: "/etc/mysql/conf.d"
      - type: bind
        source: "/C/projetos/Databases/Exports"
        target: "/tmp/Exports"
    
  mongo-express:
    image: mongo-express
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
    ports:
      - 8081:8081
    networks:
      - mongo
      - proxy
    depends_on:
      - mongo
      
  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    networks:
      - mongo

  es01:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: es01
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=es01
      - discovery.seed_hosts=es02,es01
      - discovery.seed_hosts=es02,es02
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
      - elk
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: bind
        source: ./elasticsearch/cert/elastic-certificates.p12
        target: /usr/share/elasticsearch/config/elastic-certificates.p12
        read_only: true
      - type: volume
        source: data01
        target: /usr/share/elasticsearch/data

  es02:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: es02
    environment:
      - node.name=es02
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: bind
        source: ./elasticsearch/cert/elastic-certificates.p12
        target: /usr/share/elasticsearch/config/elastic-certificates.p12
        read_only: true
      - type: volume
        source: data02
        target: /usr/share/elasticsearch/data

  es03:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: es03
    environment:
      - node.name=es03
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: bind
        source: ./elasticsearch/cert/elastic-certificates.p12
        target: /usr/share/elasticsearch/config/elastic-certificates.p12
        read_only: true
      - type: volume
        source: data03
        target: /usr/share/elasticsearch/data

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: '["http://es01:9200","http://es02:9200","http://es03:9200"]'
    ports:
      - 5601:5601
    networks:
      - elk
      - proxy
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    depends_on:
      - es01
      - es02
      - es03

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    environment: 
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600" 
    networks:
      - elk
      - proxy
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    depends_on:
      - es01
      - es02
      - es03
 
volumes:
  mongodata:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
      
networks:
  elk:
    driver: bridge
  mongo:
    external: false
  mysql:
    external: false
  arq_be:
    external: false
  proxy:
    external: true
